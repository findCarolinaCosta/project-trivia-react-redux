{"version":3,"sources":["services/tokenRequest.js","services/questionRequest.js","Pages/Login.jsx","actions/index.js","Components/Question.js","Pages/GameScreen.jsx","Pages/Settings.jsx","services/gravatarRequest.js","Components/Header.jsx","Pages/Feedback.jsx","Pages/Ranking.jsx","serviceWorker.js","reducers/player.js","reducers/token.js","reducers/ranking.js","reducers/getQuestionsReducer.js","reducers/index.js","store/index.js","index.js","App.js"],"names":["tokenRequest","a","async","fetch","response","json","ok","Promise","resolve","token","reject","console","log","questionsRequest","results","Login","state","name","email","handleInputChange","bind","onClick","onSubmit","event","preventDefault","this","props","history","dispatch","localStorage","setItem","type","data","playerObj","player","assertions","score","gravatarEmail","JSON","stringify","push","target","setState","value","isDisabled","data-testid","onChange","disabled","React","Component","connect","Question","gameTime","isSelected","actualQuestion","getQuestions","nextQuestion","setGameTime","setTimerGlobal","correctAnswer","questions","getQuestionsAction","_prevProps","prevState","clearInterval","intervalTime","className","setInterval","map","question","incorrectAnswers","incorrect_answers","shuffled","correct_answer","sort","key","category","item","index","difficulty","difficultyScore","newAssertion","DIFFICULTY_NUMBER","playerNew","setUpdateScore","GameScreen","catchPicture","ranking","link","find","picture","alt","src","Settings","convertEmailToHash","hash","md5","toString","Header","gravatar","Feedback","onButtonClick","route","payload","Ranking","updateRanking","b","idx","Boolean","window","location","hostname","match","INITIAL_PLAYER_STATE","playerReducer","action","tokenReducer","INITIAL_STATE","rankingReducer","getQuestionsReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f6ccbf8.chunk.js","sourcesContent":["const tokenRequest = async () => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const json = await response.json();\n    return response.ok ? Promise.resolve(json.token) : Promise.reject(json);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport default tokenRequest;\n","const questionsRequest = async (token) => {\n  try {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const { results } = await response.json();\n    return results;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport default questionsRequest;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getPlayer, getUser } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const { history, dispatch } = this.props;\n    const { name, email } = this.state;\n    dispatch(getPlayer());\n    dispatch(getUser({ name, email }));\n    const playerObj = {\n      player: {\n        name,\n        assertions: [],\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(playerObj));\n    localStorage.setItem('ranking', []);\n    history.push('/game');\n  }\n\n  onClick() {\n    const { history } = this.props;\n    history.push('./settings');\n  }\n\n  handleInputChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  render() {\n    const { name, email } = this.state;\n    const isDisabled = name && email;\n    return (\n      <form onSubmit={ this.onSubmit }>\n        <input\n          data-testid=\"input-player-name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={ this.handleInputChange }\n          value={ name }\n        />\n        <input\n          data-testid=\"input-gravatar-email\"\n          type=\"text\"\n          name=\"email\"\n          onChange={ this.handleInputChange }\n          value={ email }\n        />\n        <button\n          data-testid=\"btn-play\"\n          type=\"submit\"\n          disabled={ !isDisabled }\n        >\n          Jogar\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ this.onClick }\n        >\n          Configurações\n        </button>\n      </form>);\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  // token: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import tokenRequest from '../services/tokenRequest';\nimport questionsRequest from '../services/questionRequest';\n\nexport const GET_PLAYER_TOKEN = 'GET_PLAYER_TOKEN';\nexport const GET_USER = 'GET-USER';\nexport const GET_USER_RANKING = 'GET_USER_RANKING';\nexport const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_UPDATE_SCORE = 'SET_UPDATE_SCORE';\nexport const RESET_PLAYER_SCORE_AND_ASSERTIONS = 'RESET_PLAYER_SCORE_AND_ASSERTIONS';\n\nexport const getPlayerToken = (token) => ({\n  type: GET_PLAYER_TOKEN,\n  token,\n});\n\nexport const setQuestions = (questions) => ({\n  type: SET_QUESTIONS,\n  questions,\n});\n\nexport const setUpdateScore = (player, score, assertions) => {\n  const playerNew = { ...player };\n  playerNew.score = score + player.score;\n  playerNew.assertions = assertions;\n  localStorage.setItem('state', JSON.stringify({ player: playerNew }));\n  return ({\n    type: SET_UPDATE_SCORE,\n    score,\n    assertions,\n  });\n};\nexport const getPlayer = () => async (dispatch) => {\n  try {\n    const response = await tokenRequest();\n    localStorage.setItem('token', response);\n    dispatch(getPlayerToken(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getUser = (data) => ({\n  type: GET_USER,\n  data,\n});\n\nexport const resetPlayerScore = () => ({\n  type: RESET_PLAYER_SCORE_AND_ASSERTIONS,\n});\n\nexport const getQuestionsAction = (token) => async (dispatch) => {\n  try {\n    const response = await questionsRequest(token);\n    dispatch(setQuestions(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getUserRanking = (payload) => ({\n  type: GET_USER_RANKING,\n  payload,\n});\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getQuestionsAction, setUpdateScore } from '../actions';\nimport './question.css';\n\nconst GAME_TIME = 30;\nconst ONE_SECOND_IN_MS = 1000;\nclass Question extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gameTime: GAME_TIME,\n      isSelected: false,\n      actualQuestion: 0,\n    };\n    this.getQuestions = this.getQuestions.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.setGameTime = this.setGameTime.bind(this);\n    this.setTimerGlobal = this.setTimerGlobal.bind(this);\n    this.correctAnswer = this.correctAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    const { token, dispatch } = this.props;\n    dispatch(getQuestionsAction(token));\n    this.setTimerGlobal();\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const { player } = this.props;\n    if (prevState.gameTime === 1) {\n      clearInterval(this.intervalTime);\n    }\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalTime);\n    this.setGameTime();\n  }\n\n  onClick({ target }) {\n    const { className } = target;\n    if (className === 'correct-answer') {\n      this.correctAnswer();\n    }\n    this.setState({ isSelected: true });\n    const { gameTime } = this.state;\n    clearInterval(this.intervalTime);\n    this.setState({\n      gameTime,\n    });\n  }\n\n  setTimerGlobal() {\n    this.intervalTime = setInterval(() => {\n      this.setState((prevState) => ({\n        gameTime: prevState.gameTime - 1,\n        isSelected: prevState.gameTime === 1,\n      }));\n    }, ONE_SECOND_IN_MS);\n  }\n\n  setGameTime() {\n    this.setState({\n      gameTime: GAME_TIME,\n    });\n  }\n\n  getQuestions() {\n    const { isSelected } = this.state;\n    const { questions } = this.props;\n    return (questions.map((question) => {\n      const incorrectAnswers = question.incorrect_answers;\n      const questionsArr = [...incorrectAnswers, question.correct_answer];\n      const shuffled = questionsArr.sort();\n      return (\n        <div key={ question.correct_answer }>\n          <h2 data-testid=\"question-category\">{ question.category }</h2>\n          <p data-testid=\"question-text\">{ question.question }</p>\n          {shuffled.map((item, index) => {\n            if (item === question.correct_answer) {\n              return (\n                <button\n                  key=\"correct-answer\"\n                  type=\"button\"\n                  data-testid=\"correct-answer\"\n                  className=\"correct-answer\"\n                  onClick={ this.onClick }\n                  difficulty={ question.difficulty }\n                  disabled={ isSelected }\n                >\n                  { item }\n                </button>\n              );\n            }\n            return (\n              <button\n                key={ `wrong-answer-${index}` }\n                type=\"button\"\n                data-testid={ `wrong-answer-${index}` }\n                className=\"wrong-answer\"\n                onClick={ this.onClick }\n                difficulty={ question.difficulty }\n                disabled={ isSelected }\n              >\n                { item }\n              </button>);\n          })}\n        </div>);\n    }));\n  }\n\n  correctAnswer() {\n    // Calcular pontuação baseada em: 10 + (timer * dificuldade)\n    // hard: 3, medium: 2, easy: 1\n    const BASE_SCORE = 10;\n    const DIFFICULTY_NUMBER = 3;\n    let difficultyScore = 1;\n\n    const { gameTime, actualQuestion } = this.state;\n    const { questions, dispatch, player } = this.props;\n    const { assertions } = player;\n    const { difficulty } = questions[actualQuestion];\n    const newAssertion = assertions + 1;\n    switch (difficulty) {\n    case 'hard':\n      difficultyScore = DIFFICULTY_NUMBER;\n      break;\n    case 'medium':\n      difficultyScore = DIFFICULTY_NUMBER - 1;\n      break;\n    default:\n      difficultyScore = DIFFICULTY_NUMBER - 2;\n      break;\n    }\n\n    const pontuação = BASE_SCORE + (gameTime * difficultyScore);\n    dispatch(setUpdateScore(player, pontuação, newAssertion));\n  }\n\n  nextQuestion() {\n    const MAX_QUEST = 4;\n    const { actualQuestion } = this.state;\n    const { history } = this.props;\n    if (actualQuestion < MAX_QUEST) {\n      this.setState((prevState) => ({\n        actualQuestion: prevState.actualQuestion + 1,\n        isSelected: false,\n      }));\n    } else {\n      history.push('./feedback');\n    }\n    this.setGameTime();\n    this.setTimerGlobal();\n  }\n\n  render() {\n    const { token } = this.props;\n    const { actualQuestion, isSelected, gameTime } = this.state;\n    return (\n      <div className=\"teste\">\n        { !token ? '' : this.getQuestions()[actualQuestion] }\n        { isSelected\n        && (\n          <button\n            data-testid=\"btn-next\"\n            type=\"button\"\n            onClick={ this.nextQuestion }\n            disabled={ !isSelected }\n          >\n            Próxima\n          </button>)}\n        <p>{gameTime}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.questions,\n  player: state.player,\n});\n\nQuestion.propTypes = {\n  token: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.any).isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  player: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps)(Question);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Question from '../Components/Question';\n\nclass GameScreen extends React.Component {\n  constructor() {\n    super();\n    this.catchPicture = this.catchPicture.bind(this);\n  }\n\n  catchPicture() {\n    const { ranking, name } = this.props;\n    const link = ranking.find((data) => data.name === name);\n    if (link) {\n      return link.picture;\n    }\n    return '';\n  }\n\n  render() {\n    const { name, history, score } = this.props;\n    return (\n      <div>\n        <header>\n          <img\n            data-testid=\"header-profile-picture\"\n            alt=\"Foto do perfil\"\n            src={ this.catchPicture() }\n          />\n          <p\n            data-testid=\"header-player-name\"\n          >\n            { name }\n          </p>\n          <p\n            data-testid=\"header-score\"\n          >\n            { score }\n          </p>\n        </header>\n        <Question history={ history } />\n      </div>\n    );\n  }\n}\n\nGameScreen.propTypes = {\n  name: PropTypes.string.isRequired,\n  ranking: PropTypes.arrayOf(PropTypes.any).isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  ranking: state.ranking,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(GameScreen);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <h1\n        data-testid=\"settings-title\"\n      >\n        Possui um titulo\n      </h1>\n    );\n  }\n}\n\nexport default Settings;\n","import md5 from 'crypto-js/md5';\n\nfunction convertEmailToHash(email) {\n  const URL = 'https://www.gravatar.com/avatar/';\n  const hash = md5(email).toString();\n  const completeLink = `${URL}${hash}`;\n\n  return completeLink;\n}\n\nexport default convertEmailToHash;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport convertEmailToHash from '../services/gravatarRequest';\n\nclass Header extends Component {\n  render() {\n    const { email, name, score } = this.props;\n    const gravatar = convertEmailToHash(email);\n    return (\n      <div>\n        <img src={ gravatar } alt=\"\" data-testid=\"header-profile-picture\" />\n        <h1 data-testid=\"header-player-name\">{ name }</h1>\n        <h2 data-testid=\"header-score\">{ score }</h2>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.player.email,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getUserRanking, resetPlayerScore } from '../actions';\nimport Header from '../Components/Header';\nimport convertEmailToHash from '../services/gravatarRequest';\n\nclass Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onButtonClick = this.onButtonClick.bind(this);\n  }\n\n  onButtonClick(route) { // name, email, score\n    const { history, dispatch, name, email, score } = this.props;\n    const playerObj = {\n      player: {\n        name: '',\n        assertions: [],\n        score: 0,\n        gravatarEmail: '',\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(playerObj));\n    dispatch(resetPlayerScore());\n    const picture = convertEmailToHash(email);\n    const currentPlayerObj = { name, picture, score };\n    dispatch(getUserRanking(currentPlayerObj));\n    history.push(route);\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const NUMERO_DE_ACERTOS = 3;\n    return (\n      <>\n        <Header />\n        {assertions < NUMERO_DE_ACERTOS\n          ? <h1 data-testid=\"feedback-text\">Podia ser melhor...</h1>\n          : <h1 data-testid=\"feedback-text\">Mandou bem!</h1>}\n        <h2 data-testid=\"feedback-total-score\">{score}</h2>\n        <h3 data-testid=\"feedback-total-question\">{assertions}</h3>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => this.onButtonClick('/') }\n        >\n          Jogar novamente\n\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ () => this.onButtonClick('/ranking') }\n        >\n          Ver Ranking\n\n        </button>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n  ranking: state.ranking,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.state = {\n      ranking: [],\n    };\n    this.updateRanking = this.updateRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateRanking();\n  }\n\n  onClick() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  updateRanking() {\n    const { ranking } = this.props;\n    this.setState({\n      ranking,\n    });\n  }\n\n  render() {\n    const { ranking } = this.state;\n    console.log(ranking);\n    return (\n      <div>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        {ranking.sort((a, b) => b.score - a.score)\n          .map((player, idx) => (\n            <article\n              key={ idx }\n            >\n              <img src={ player.picture } alt={ player.name } />\n              <h2\n                data-testid={ `player-name-${idx}` }\n              >\n                {player.name}\n\n              </h2>\n              <h3\n                data-testid={ `player-score-${idx}` }\n              >\n                {player.score}\n\n              </h3>\n            </article>))}\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.onClick }\n        >\n          Voltar ao Início\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.ranking,\n});\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  ranking: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps)(Ranking);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_USER, SET_UPDATE_SCORE,\n  RESET_PLAYER_SCORE_AND_ASSERTIONS } from '../actions';\n\nconst INITIAL_PLAYER_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_PLAYER_STATE, action) => {\n  switch (action.type) {\n  case GET_USER:\n    return {\n      ...state,\n      name: action.data.name,\n      gravatarEmail: action.data.email,\n    };\n  case SET_UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n      assertions: action.assertions,\n    };\n  case RESET_PLAYER_SCORE_AND_ASSERTIONS:\n    return {\n      ...state,\n      score: 0,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { GET_PLAYER_TOKEN } from '../actions';\n\nconst tokenReducer = (state = '', action) => {\n  switch (action.type) {\n  case GET_PLAYER_TOKEN:\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { GET_USER_RANKING } from '../actions';\n\nconst INITIAL_STATE = [];\n\nconst rankingReducer = (state = INITIAL_STATE, action) => {\n  localStorage.setItem('ranking', JSON.stringify([...state, action.payload]));\n  switch (action.type) {\n  case GET_USER_RANKING:\n    return [...state, action.payload];\n  default:\n    return state;\n  }\n};\n\nexport default rankingReducer;\n","import { SET_QUESTIONS } from '../actions';\n\nconst getQuestionsReducer = (state = [], action) => {\n  switch (action.type) {\n  case SET_QUESTIONS:\n    return action.questions;\n  default:\n    return state;\n  }\n};\n\nexport default getQuestionsReducer;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\nimport ranking from './ranking';\nimport getQuestionsReducer from './getQuestionsReducer';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n  ranking,\n  questions: getQuestionsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) { window.store = store; }\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router';\nimport Login from './Pages/Login';\nimport GameScreen from './Pages/GameScreen';\nimport Settings from './Pages/Settings';\nimport Feedback from './Pages/Feedback';\nimport Ranking from './Pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={ Login }\n      />\n      <Route\n        path=\"/game\"\n        component={ GameScreen }\n      />\n      <Route\n        path=\"/settings\"\n        component={ Settings }\n      />\n      <Route\n        path=\"/feedback\"\n        component={ Feedback }\n      />\n      <Route\n        path=\"/ranking\"\n        component={ Ranking }\n      />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}